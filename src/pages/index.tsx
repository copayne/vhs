import type {
  GetStaticProps,
  InferGetStaticPropsType,
} from 'next';
import { signIn, signOut, useSession } from "next-auth/react";
import prisma from '../../lib/prisma';
import Head from "next/head";
import ReactPlayer from "react-player";
import Featuring from '../components/Featuring';
import NetworkBanner from '../components/NetworkBanner';
import VideoHeader from '../components/VideoHeader';
import { ColorStripeRainbow } from '~/components/common/ColorStripe';
import { api } from "~/utils/api";
import { Inter } from 'next/font/google';

const interFont = Inter({
  weight: ['300', '400', '500', '600'],
  style: 'normal',
  subsets: ['latin'],
});

const CLOUDFRONT_ADDRESS = 'https://dx19ntdwg65hl.cloudfront.net';

const buildSrc = (fileName : string) => `${CLOUDFRONT_ADDRESS}/exports/${fileName}.mp4`;

export const getStaticProps: GetStaticProps = async () => {
  const videos = await prisma.video.findMany({
    select: {
      category: true,
      featured: true,
      filmed: true,
      // filmDate: true,
      id: true,
      length: true,
      name: true,
      src: true,
    }
  });

  return {
    props: { videos },
    revalidate: 10,
  };
};

interface Video {
  category: object,
  featured: Array<Actor>
  filmed: Array<Actor>
  id: number,
  length: number,
  name: string,
  src: string,
}

interface Actor {
  name: string,
  id: number,
  headshot: string,
};

export default function Home({ videos }: InferGetStaticPropsType<typeof getStaticProps>) {
  const video: Video | null = Array.isArray(videos) && videos.length
    ? (videos.find((v: Video) => v.name === "Christmas '94") as Video)
    : null;

  return (
    <>
      <style jsx global>{`
        html {
          font-family: ${interFont.style.fontFamily};
        }
      `}</style>
      <Head>
        <title>Payne Network</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-default-background flex min-h-screen flex-col w-full">
      <NetworkBanner />
      {
        !!video && (
          <section className="flex min-h-screen flex-col w-full sm:w-1/2 sm:m-auto mt-0 sm:mt-8">
            <div className="sm:w-full lg:w-3/5 sm:m-auto sm:mb-0 sm:mt-0">
              {
                video && (
                  <ReactPlayer
                    controls
                    height="100%"
                    url={buildSrc(video.src)}
                    width="100%"
                  />
                )
              }

            </div>
            <ColorStripeRainbow />
            <VideoHeader title={video.name} length={video.length} />
            <Featuring featuring={video.featured.map((actor: Actor) => actor.name.toLowerCase())} />
          </section>
        )
      }
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
